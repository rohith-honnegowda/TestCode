getpwd()
help
help(pwd)
getwd()
data()
getwd()
setwd(/Users/sudeeparohith/Documents/Code/R)
setwd("/Users/sudeeparohith/Documents/Code/R")
getwd()
getwd()
help(rep)
help(scan)
help(rep)
a <- c(1,2,3)
a
b <- rep(a, times = 5)
b
rep.len(b)
help(rep)
rep_len(b)
rep_len(b, NA)
rep_len(b, -1)
rep_len(b, length.out = NA)
c <- rep(1:3, 5)
c
rep_len(c, 10)
c
length(c)
help(save)
savehistory("~/Documents/Code/R/Question1.Rhistory")
faithful
duration = faithful$eruptions
waiting = faithful$waiting
duration
waiting
help(pie)
pie(duration, edges = 200, radius = 1.0, breaks = 0.5)
pie(duration, edges = 200, labels = "Eruption's duration", radius = 1.0, breaks = 0.5)
pie(duration, edges = 200, title = "Eruption's duration", radius = 1.0, breaks = 0.5)
pie(waiting, edges = 200, main = "Eruption's waiting", radius = 1.0, breaks = 0.5)
help(plot)
plot(duration, waiting, main = "Duration of Eruption vs Waiting times", xlab = "Durations", ylab = "Waiting", type = "p")
plot(duration, waiting, main = "Duration of Eruption vs Waiting times", xlab = "Durations", ylab = "Waiting", type = "b")
plot(duration, waiting, main = "Duration of Eruption vs Waiting times", xlab = "Durations", ylab = "Waiting", type = "h")
plot(waiting, duration, main = "Duration of Eruption vs Waiting times", ylab = "Durations", xlab = "Waiting", type = "h")
plot(waiting, duration, main = "Duration of Eruption vs Waiting times", ylab = "Durations", xlab = "Waiting", type = "h", breaks = 242)
plot(waiting, duration, main = "Duration of Eruption vs Waiting times", ylab = "Durations", xlab = "Waiting", type = "h")
plot(duration, waiting, main = "Duration of Eruption vs Waiting times", xlab = "Durations", ylab = "Waiting", type = "h")
help
help(lm)
model = lm(waiting ~ duration, faithful)
model
help(abline)
abline(model)
help(abline)
abline(model, col = red)
abline(model, col = "red")
abline(model, col = "red", lwd = 05)
abline(model, col = "red", lwd = 5)
abline(model, col = "red", lwd = 10)
help(data.frame)
help(sapply)
faithful$type = apply(faithful, 1, function(row) if(faithful$eruptions > 3.10) "short" else "long")
faihful
faithful
faithful$type = apply(faithful, 1, function(row) (if(faithful$eruptions > 3.10) "short" else "long"))
faithful$type = apply(faithful, 1, function(row) (if(faithful$eruptions > 3.10) "short" else "long"))
faithful
help(apply)
checkifshort = function(eruption){}
checkifshort = function(eruption){
if(waiting > 3.100)
return "longer"
if(waiting > 3.100)
checkifshort = function(eruption, type = "test"){
if(waiting > 3.100)
type = "longer"
else
type = "shorter"
}
faithful$type = checkifshort(faithful$eruptions, type = "test")
faithful
if(all(faithful$eruptions < 3.100)) faithful$type = "short"
faithful
if(all(faithful$eruptions < 3.100)){ faithful$type = "short" }
faithful
faithful$type = ifelse(faithful$eruptions > 3.100, "short", "long")
faithful
help(sort)
sort(faithful$eruptions, decreasing = FALSE)
faithful
faithful$type = ifelse(faithful$eruptions < 3.100, "short", "long")
faithful
help(boxplot)
faithful
boxplot(waiting)
boxplot(duration)
boxplot(waiting ~type)
boxplot(waiting ~ type)
boxplot(waiting ~ type, faithful)
help(boxplot)
boxplot(duration ~ type, faithful)
help(rtriangle)
help(triangle)
install.package("triangle")
install.packages("triangle")
install.packages("e1071")
help(rtriangle)
help("rtriangle")
help("rtriangle()")
help(rtriangle)
install.packages("triangle")
getwd()
ls
help(rltriangle)
help(plot)
help(triangle)
??triangle
probabilities = rltriangle(n = 20, a = 0, b = 1)
probabilities = rtriangle(n = 20, a = 0, b = 1)
tri <- rltriangle(100000, 1, 100, 10)
install.packages("ade4")
help(triangle)
help(rtriangle)
help(rltriangle)
help("rltriangle")
help('triangle')
install.packages('triangle')
help(triangle)
help(rtriangle)
install.packages("~/Downloads/triangle_0.8.tgz", repos = NULL)
library(triangle)
help(triangle)
probability = rtriangle(n = 20, a=0, b=1, c=(a+b)/2)
probability = rtriangle(n, a=0, b=1, c=(a+b)/2)
rtriangle(n, a=0, b=1, c=(a+b)/2)
n = 20
rtriangle(n, a=0, b=1, c=(a+b)/2)
a = 0
b = 1
rtriangle(n, a=0, b=1, c=(a+b)/2)
hist(rtriangle(n, a=0, b=1, c=(a+b)/2))
hist(rtriangle(n, a=0, b=1, c=(a+b)/2), breaks = 20)
hist(rtriangle(n, a=0, b=1, c=(a+b)/2), breaks = 40)
hist(rtriangle(n, a=0, b=1, c=(a+b)/2), breaks = 100)
n = 100
hist(rtriangle(n, a=0, b=1, c=(a+b)/2), breaks = 100)
firsthalf = rtriangle(n, a=0, b=0.5, c=(a+b)/2)
firsthalf
a = 0.5
b = 1.0
secondhalf = rtriangle(n, a=0.5, b=1, c=(a+b)/2)
secondhalf
firsthalf = sort(firsthalf, decreasing = FALSE)
secondhalf = sort(secondhalf, decreasing = TRUE)
hist(c(firsthalf, secondhalf))
firsthalf
secondhalf
hist(c(firsthalf, secondhalf), breaks = 200)
c(firsthalf, secondhalf)
hist(c(firsthalf, secondhalf), breaks = 200)
help(matrix)
n = 2000
a = 0
b = 1
TRI = matrix(rtriangle(n, a, b, c=(a+b)/2))
TRI = matrix(rtriangle(n, a, b, c=(a+b)/2), nrow = 100, ncol = 20)
help(rtriangle)
library("triangle", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
help(rtriangle)
TRI = matrix(rtriangle(n, a, b, c=(a+b)/2), nrow = 100, ncol = 20)
TRI
populatematrix = function(n = 2000, a = 0, b = 1){
return (rtriangle(n, a, b, c=(a+b)/2))
}
MAT = matrix(populatematrix(n=2000, a = 0, b = 1), nrow = 100, ncol = 20)
MAT
populatematrix = function(n = 2000){
return (rtriangle(n, a = 0, b = 1))
}
MAT = matrix(populatematrix, nrow = 100, ncol = 20)
MAT = matrix(populatematrix(n = 2000), nrow = 100, ncol = 20)
MAT
help(matplot)
matplot(MAT[,2], MAT[,6])
matplot(MAT[,2])
matplot(x, MAT[,2])
matplot(1, MAT[,2])
matplot(1:100, MAT[,2])
hist(MAT[,2], MAT[,9]
)
hist(MAT[,2], MAT[,9], breaks = 100)
vec1 = MAT[,7]
vec2 = MAT[,18]
length(vec1)
length(vec2)
help(plot)
plot(x, vec1)
plot(2, vec1)
x = c(rtriangle(n = 20, a = 0, b = 1, c=(a+b)/2))
x
plot(x, vec1)
x = c(rtriangle(n = 100, a = 0, b = 1, c=(a+b)/2))
plot(x, vec1)
lines(x, vec2)
lines(x, vec2, col = "red")
plot(x, vec1, col = "cyan")
lines(x, vec2, col = "red")
plot(x, vec1, col = "blue")
plot(x, vec1, col = "blue", lwd = 5
)
plot(x, vec1, col = "blue", lwd = 5)
lines(x, vec2, col = "red", lwd = 5)
lines(x, vec2, col = "red", lwd = 2)
plot(x, vec1, col = "blue", lwd = 5)
lines(x, vec2, col = "red", lwd = 2)
plot(x, vec1, col = "blue", lwd = 5, main = "Matrix Distributions vs Predictor", ylab = "Two columns", xlab = "Predictor")
lines(x, vec2, col = "red", lwd = 2)
MAT
MAT[0,100]
MAT[1,100]
MAT[1,99]
MAT[1,1]
help(cbind)
help(apply)
help(colsums)
help(colSums)
MAT = cbind(MAT, colSums(MAT[,1:20]))
MAT
hist(MAT[,21])
hist(MAT[,21], breaks = 2000)
hist(MAT[,21], breaks = 200)
hist(MAT[,21], breaks = 500)
hist(MAT[,21], breaks = 250)
hist(MAT[,21], breaks = 200)
hist(MAT[,21], breaks = 100)
hist(MAT[,21], breaks = 50)
hist(MAT[,21], breaks = 100)
hist(MAT[,21], breaks = 10)
hist(MAT[,21], breaks = 5)
hist(MAT[,21], breaks = 4)
hist(MAT[,21], breaks = 3)
hist(MAT[,21], breaks = 2)
hist(MAT[,21], breaks = 5)
help(curve)
hist(MAT[,21], breaks = 20)
help(dnorm)
hist(MAT[,21], breaks = 20)
curve(dnorm(MAT[,21]))
help(dnorm)
curve(dnorm(MAT[,21]))
MAT[,21]
x = MAT[,21]
x
curve(dnorm(x))
hist(MAT[,21], breaks = 20)
curve(dnorm(x))
hist(MAT[,21], breaks = 20)
lines(MAT[,21],)
lines(MAT[,21])
hist(MAT[,21], breaks = 100)
hist(MAT[,21], breaks = 500)
hist(MAT[,21], breaks = 50)
hist(MAT[,21], breaks = 20)
hist(MAT[,21], breaks = 10)
hist(MAT[,21], breaks = 10)
hist(MAT[,21], breaks = 50)
hist(MAT[,21], breaks = 5)
hist(MAT[,21], breaks = 5, density = 5)
abline(MAT[,21])
abline(MAT[,21])
x
help(bnorm)
help(dbinom)
dbinom(MAT[,21], size = 60, p = 0.3)
p1 = dbinom(MAT[,21], size = 60, p = 0.3)
p1
p2 = dbinom(MAT[,21], size = 60, p = 05)
p2
p2 = dbinom(MAT[,21], size = 60, p = 0.5)
p2
p2 = dbinom(MAT[,21], size = 60, p = 0.8)
p2
p2 = dbinom(MAT[,21], size = 60, p = 0.8, n = 100)
p2 = dbinom(MAT, size = 60, p = 0.8)
p2
hist(MAT[,21], breaks = 5, density = 5)
fitdistr(MAT[,21], "normal")
library("MASS", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
fitdistr(MAT[,21], "normal")
hist(MAT[,21], breaks = 5, density = 5)
fitdistr(MAT[,21], "normal")
help(dbinom)
MAT[,21]
savehistory("~/Documents/history.txt")
dbinom(MAT, 60, 0,3)
dbinom(duration, 60, 0.3)
plot(dbinom(duration, 60, 0.3))
hist(dbinom(duration, 60, 0.3))
hist(dbinom(waiting, 60, 0.3))
plot(dbinom(waiting, 60, 0.3))
plot(dbinom(waiting, 60, 0.3), type = "l")
plot(dbinom(waiting, 60, 0.3), type = "p")
plot(dbinom(waiting, 60, 0.3), type = "h")
plot(dbinom(waiting, 60, 0.5), type = "h")
plot(dbinom(waiting, 60, 0.8), type = "h")
plot(dbinom(duration, 60, 0.8), type = "h")
plot(dbinom(duration, 60, 0.5), type = "h")
plot(dbinom(duration, 60, 0.3), type = "h")
quartile(dbinom(duration, 60, 0.3))
help(quartile)
quantile(dbinom(duration, 60, 0.3))
quantile(dbinom(duration, 60, 0.5))
quantile(dbinom(duration, 60, 0.8))
median(dbinom(duration, 60, 0.8))
median(dbinom(duration, 60, 0.5))
median(dbinom(duration, 60, 0.3))
mean(dbinom(duration, 60, 0.3))
mean(dbinom(duration, 60, 0.5))
mean(dbinom(duration, 60, 0.8))
sd(dbinom(duration, 60, 0.8))
sd(dbinom(duration, 60, 0.5))
sd(dbinom(duration, 60, 0.3))
quantile(duration, c(.66))
quantile(dbinom(duration, 60, 0.3), c(.66))
help(boxplot)
boxplot(quantile(dbinom(duration, 60, 0.8)))
savehistory("~/Documents/history.txt")
